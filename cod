import smtplib
import os
import json
import xml.etree.ElementTree as ET
from datetime import datetime, timedelta
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import tkinter as tk
from tkinter import messagebox, simpledialog, Listbox, MULTIPLE, Toplevel, Entry, Label, Button, Text, END, CENTER, StringVar, OptionMenu
from threading import Thread
import time

# Файл для хранения данных пользователя
USER_DATA_FILE = "user_data.json"

# Файл для хранения запланированных писем
EMAILS_XML_FILE = "scheduled_emails.xml"

# Файл для хранения email адресов
EMAILS_FILE = "emails.txt"

# Возможные интервалы
INTERVALS = {
    "1 год": 525600,
    "6 месяцев": 262800,
    "1 месяц": 43800,
    "1 неделя": 10080,
    "1 день": 1440,
    "10 часов": 600,
    "5 часов": 300,
    "1 час": 60,
    "30 минут": 30,
    "10 минут": 10,
    "1 минута": 1,
    "Пользовательский": None
}

# Функция для загрузки учетных данных пользователя
def load_user_data():
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, "r") as file:
            data = json.load(file)
            return data.get("email"), data.get("password")
    return None, None

# Функция для сохранения учетных данных пользователя
def save_user_data(email, password):
    data = {"email": email, "password": password}
    with open(USER_DATA_FILE, "w") as file:
        json.dump(data, file)

# Функция для отправки письма через Яндекс Почту
def send_email(recipients, subject, body):
    email, password = load_user_data()
    if not email or not password:
        print("Ошибка: учетные данные пользователя не загружены.")
        return

    msg = MIMEMultipart()
    msg['From'] = email
    msg['To'] = ", ".join(recipients)
    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'plain'))

    try:
        server = smtplib.SMTP('smtp.yandex.com', 587)
        server.starttls()
        server.login(email, password)
        server.send_message(msg)
        server.quit()
        print(f"Письмо успешно отправлено: {subject} к {', '.join(recipients)}")
    except Exception as e:
        print(f"Ошибка при отправке письма: {str(e)}")

# Функция для проверки целостности данных письма
def validate_email_data(email):
    required_fields = ['date', 'time', 'recipients', 'subject', 'body', 'interval']
    for field in required_fields:
        if email.find(field) is None or not email.find(field).text.strip():
            return False
    return True

# Функция для проверки и отправки писем по расписанию
def check_scheduled_emails():
    while True:
        if os.path.exists(EMAILS_XML_FILE):
            tree = ET.parse(EMAILS_XML_FILE)
            root = tree.getroot()
            for email in root.findall('email'):
                email_date = email.get('date')
                email_time = email.get('time')
                email_sent = email.get('sent')
                interval = email.find('interval').text if email.find('interval') is not None else None

                if not validate_email_data(email):
                    print(f"Ошибка: письмо содержит некорректные данные. Исправьте их.")
                    continue

                if email_sent != 'true' and f"{email_date} {email_time}" <= datetime.now().strftime("%Y-%m-%d %H:%M"):
                    recipients = email.find('recipients').text.split(',')
                    subject = email.find('subject').text
                    body = email.find('body').text

                    send_email(recipients, subject, body)
                    email.set('sent', 'true')
                    tree.write(EMAILS_XML_FILE)

                if email_sent == 'true' and interval:
                    next_send_time = datetime.strptime(f"{email_date} {email_time}", "%Y-%m-%d %H:%M") + timedelta(
                        minutes=int(interval))
                    if next_send_time <= datetime.now():
                        email.set('date', next_send_time.strftime("%Y-%m-%d"))
                        email.set('time', next_send_time.strftime("%H:%M"))
                        email.set('sent', 'false')
                        tree.write(EMAILS_XML_FILE)

        time.sleep(20)

# Функция для загрузки email адресов из файла
def load_email_addresses():
    if os.path.exists(EMAILS_FILE):
        with open(EMAILS_FILE, "r") as file:
            return [line.strip() for line in file.readlines()]
    return []

# Функция для сохранения email адресов в файл
def save_email_addresses(email_list):
    with open(EMAILS_FILE, "w") as file:
        for address in email_list:
            file.write(address + "\n")

# Функция для создания запланированного письма
def create_scheduled_email_gui(email_data=None):
    create_window = Toplevel()
    create_window.title("Создать запланированное письмо")
    create_window.geometry("500x650")

    def load_email_list():
        email_list = load_email_addresses()
        email_listbox.delete(0, END)
        for address in email_list:
            email_listbox.insert(END, address)

    def on_add_email():
        email = simpledialog.askstring("Добавить получателя", "Введите email адрес:")
        if email:
            current_emails = load_email_addresses()
            current_emails.append(email)
            save_email_addresses(current_emails)
            load_email_list()

    def on_select_all():
        email_listbox.select_set(0, END)

    def on_save():
        date = date_entry.get()
        time_ = time_entry.get()
        selected_recipients = [email_listbox.get(i) for i in email_listbox.curselection()]
        subject = subject_entry.get()
        body = body_text.get("1.0", END).strip()
        interval_choice = interval_var.get()

        if interval_choice == "Пользовательский":
            interval = simpledialog.askinteger("Интервал", "Введите интервал в минутах:")
        else:
            interval = INTERVALS[interval_choice]

        if not all([date, time_, selected_recipients, subject, body]) or interval is None:
            messagebox.showerror("Ошибка", "Все поля должны быть заполнены.")
            return

        email_element = ET.Element("email", date=date, time=time_, sent="false")
        ET.SubElement(email_element, "recipients").text = ",".join(selected_recipients)
        ET.SubElement(email_element, "subject").text = subject
        ET.SubElement(email_element, "body").text = body
        ET.SubElement(email_element, "interval").text = str(interval)

        if os.path.exists(EMAILS_XML_FILE):
            tree = ET.parse(EMAILS_XML_FILE)
            root = tree.getroot()
        else:
            root = ET.Element("emails")
            tree = ET.ElementTree(root)

        root.append(email_element)
        tree.write(EMAILS_XML_FILE)

        messagebox.showinfo("Успех", "Письмо запланировано.")
        create_window.destroy()

    Label(create_window, text="Дата (YYYY-MM-DD):", anchor=CENTER).pack(pady=5)
    date_entry = Entry(create_window, width=50)
    date_entry.pack(pady=5)

    Label(create_window, text="Время (HH:MM):", anchor=CENTER).pack(pady=5)
    time_entry = Entry(create_window, width=50)
    time_entry.pack(pady=5)

    Label(create_window, text="Получатели (выберите из списка):", anchor=CENTER).pack(pady=5)

    email_listbox = Listbox(create_window, selectmode=MULTIPLE, width=50, height=5)
    email_listbox.pack(pady=5)
    load_email_list()

    add_email_button = Button(create_window, text="Добавить почту", command=on_add_email)
    add_email_button.pack(pady=5)

    select_all_button = Button(create_window, text="Выбрать всё", command=on_select_all)
    select_all_button.pack(pady=5)

    Label(create_window, text="Тема:", anchor=CENTER).pack(pady=5)
    subject_entry = Entry(create_window, width=50)
    subject_entry.pack(pady=5)

    Label(create_window, text="Текст письма:", anchor=CENTER).pack(pady=5)
    body_text = Text(create_window, width=50, height=10)
    body_text.pack(pady=5)

    Label(create_window, text="Интервал отправки:", anchor=CENTER).pack(pady=5)
    interval_var = StringVar(create_window)
    interval_var.set(list(INTERVALS.keys())[0])  # Установить первый элемент в качестве значения по умолчанию
    interval_menu = OptionMenu(create_window, interval_var, *INTERVALS.keys())
    interval_menu.pack(pady=5)

    save_button = Button(create_window, text="Сохранить", command=on_save)
    save_button.pack(pady=20)

    create_window.mainloop()

# Функция для просмотра и редактирования списка email адресов
def edit_recipients_gui():
    def load_email_list():
        email_list = load_email_addresses()
        email_listbox.delete(0, END)
        for address in email_list:
            email_listbox.insert(END, address)

    def on_add_email():
        email = simpledialog.askstring("Добавить получателя", "Введите email адрес:")
        if email:
            current_emails = load_email_addresses()
            current_emails.append(email)
            save_email_addresses(current_emails)
            load_email_list()

    def on_delete_email():
        selected_indices = list(email_listbox.curselection())
        if selected_indices:
            current_emails = load_email_addresses()
            for index in reversed(selected_indices):
                current_emails.pop(index)
            save_email_addresses(current_emails)
            load_email_list()

    recipients_window = Toplevel()
    recipients_window.title("Редактировать список получателей")
    recipients_window.geometry("400x300")

    email_listbox = Listbox(recipients_window, selectmode=MULTIPLE, width=50, height=10)
    email_listbox.pack(pady=10)
    load_email_list()

    add_email_button = Button(recipients_window, text="Добавить почту", command=on_add_email)
    add_email_button.pack(pady=5)

    delete_email_button = Button(recipients_window, text="Удалить выбранные", command=on_delete_email)
    delete_email_button.pack(pady=5)

    recipients_window.mainloop()

# Функция для редактирования личных данных пользователя
def edit_user_data_gui():
    email, password = load_user_data()

    def on_save():
        new_email = email_entry.get()
        new_password = password_entry.get()
        if new_email and new_password:
            save_user_data(new_email, new_password)
            messagebox.showinfo("Успех", "Данные пользователя обновлены.")
            edit_window.destroy()
        else:
            messagebox.showerror("Ошибка", "Все поля должны быть заполнены.")

    edit_window = Toplevel()
    edit_window.title("Редактировать личные данные")
    edit_window.geometry("400x200")

    Label(edit_window, text="Email:", anchor=CENTER).pack(pady=5)
    email_entry = Entry(edit_window, width=50)
    email_entry.insert(0, email if email else "")
    email_entry.pack(pady=5)

    Label(edit_window, text="Пароль:", anchor=CENTER).pack(pady=5)
    password_entry = Entry(edit_window, show="*", width=50)
    password_entry.insert(0, password if password else "")
    password_entry.pack(pady=5)

    save_button = Button(edit_window, text="Сохранить", command=on_save)
    save_button.pack(pady=20)

    edit_window.mainloop()

# Функция для просмотра запланированных писем с возможностью удаления
def view_scheduled_emails_gui():
    def delete_selected_emails():
        selected_indices = email_listbox.curselection()
        if not selected_indices:
            messagebox.showwarning("Ошибка", "Выберите письма для удаления.")
            return
        
        # Удаляем выбранные письма из XML
        tree = ET.parse(EMAILS_XML_FILE)
        root = tree.getroot()
        emails_to_delete = [root.findall('email')[i] for i in selected_indices]
        
        for email in emails_to_delete:
            root.remove(email)
        
        tree.write(EMAILS_XML_FILE)
        load_email_list()
        messagebox.showinfo("Успех", "Выбранные письма удалены.")

    def load_email_list():
        if not os.path.exists(EMAILS_XML_FILE):
            messagebox.showwarning("Ошибка", "Нет запланированных писем.")
            return

        tree = ET.parse(EMAILS_XML_FILE)
        root = tree.getroot()
        email_listbox.delete(0, END)

        for email in root.findall("email"):
            date = email.get("date")
            time_ = email.get("time")
            recipients = email.find("recipients").text
            subject = email.find("subject").text
            
            # Проверка на существование элемента interval
            interval_element = email.find("interval")
            if interval_element is not None:
                interval = interval_element.text
            else:
                interval = "Не задан"
            
            sent = email.get("sent")

            email_info = f"Дата: {date}, Время: {time_}, Получатели: {recipients}, Тема: {subject}, Интервал: {interval}, Отправлено: {sent}"
            email_listbox.insert(END, email_info)

    view_window = Toplevel()
    view_window.title("Просмотр запланированных писем")
    view_window.geometry("600x400")

    email_listbox = Listbox(view_window, selectmode=MULTIPLE, width=80, height=15)
    email_listbox.pack(pady=10)
    load_email_list()

    delete_button = Button(view_window, text="Удалить выбранные письма", command=delete_selected_emails)
    delete_button.pack(pady=10)

    view_window.mainloop()

# Основной интерфейс программы
root = tk.Tk()
root.title("Email Scheduler")
root.geometry("300x400")

Button(root, text="Создать запланированное письмо", command=create_scheduled_email_gui).pack(pady=10)
Button(root, text="Просмотр запланированных писем", command=view_scheduled_emails_gui).pack(pady=10)
Button(root, text="Редактировать список получателей", command=edit_recipients_gui).pack(pady=10)
Button(root, text="Редактировать личные данные", command=edit_user_data_gui).pack(pady=10)

# Запуск проверки запланированных писем в отдельном потоке
Thread(target=check_scheduled_emails, daemon=True).start()

root.mainloop()
